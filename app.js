// Generated by CoffeeScript 1.7.1

/*
Module dependencies.
 */

(function() {
  var app, express, isEmpty, path, port, printKeysAndValues, request, routes, server, url, _;

  express = require("express");

  routes = require("./routes");

  path = require("path");

  request = require("request");

  url = require("url");

  path = require("path");

  _ = require("underscore");


  /*
  Middleware / express setup.
   */

  app = express();

  port = process.env.PORT || 3000;

  app.set("port", port);

  app.set("views", path.join(__dirname, "views"));

  app.set("view engine", "jade");

  app.use(express.favicon());

  app.use(express.logger("dev"));

  app.use(express.json());

  app.use(express.urlencoded());

  app.use(express.methodOverride());

  app.use(app.router);

  app.use(express["static"](path.join(__dirname, "public")));

  if ("development" === app.get("env")) {
    app.use(express.errorHandler());
  }

  server = app.listen(3000);

  console.log("Express server listening on port " + app.get("port"));


  /*
  URL Routing
   */

  app.get("/", routes.index);

  String.prototype.removeSlash = function() {
    var output;
    output = this;
    if (this.charAt(this.length - 1) === '/') {
      output = this.substr(0, this.length - 1);
    }
    return output;
  };

  isEmpty = function(obj) {
    var key;
    for (key in obj) {
      console.log(key);
      if (obj.hasOwnProperty(key)) {
        return false;
      }
    }
    return true;
  };

  printKeysAndValues = function(obj) {
    var i, key, value, _results;
    i = 0;
    _results = [];
    for (key in obj) {
      value = obj[key];
      if (i === 0) {
        console.log('query is ');
      }
      console.log('  ' + key + ': ' + value);
      _results.push(i++);
    }
    return _results;
  };

  app.get("/api/urls/:urlStr", function(req, res) {
    var indexSplit, key, stringsToSearchFor, urlObj, urlStr, urlToVisit, urlToVisitParent, visitUrl;
    res.set({
      'Content-Type': 'application/json'
    });
    setTimeout(function() {
      res.status(404);
      return res.send({
        success: false
      });
    }, 120000);
    urlStr = req.params.urlStr;
    urlObj = url.parse(urlStr, true);
    if (isEmpty(urlObj.query)) {
      urlObj.pathname = urlObj.pathname.removeSlash();
      stringsToSearchFor = urlObj.pathname.split("/");
    } else {
      printKeysAndValues(urlObj.query);
      stringsToSearchFor = [];
      for (key in urlObj.query) {
        stringsToSearchFor.push(key);
      }
      stringsToSearchFor.push("");
    }
    urlToVisit = url.format(urlObj);
    indexSplit = urlObj.pathname.lastIndexOf("/");
    urlObj.pathname = urlObj.pathname.substr(0, indexSplit);
    urlObj.query = {};
    urlObj.search = '';
    urlToVisitParent = url.format(urlObj);
    console.log(urlToVisit);
    console.log(urlToVisitParent);
    visitUrl = function(url) {
      var options;
      options = {
        url: url,
        headers: {
          'User-Agent': 'PaulCowgillBot'
        }
      };
      return request(options, function(error, response, html) {
        var allAnswers, allAnswersA, allAnswersB, alreadySent, answer, answerA, answerB, count, element, index, n, options2, regexToSearchFor, urlOutput, useRoot, word, _i, _j, _k, _l, _len, _len1, _len2, _len3;
        allAnswers = [];
        allAnswersA = [];
        allAnswersB = [];
        if (!error && response.statusCode === 200) {
          console.log("Searching for...");
          for (index = _i = 0, _len = stringsToSearchFor.length; _i < _len; index = ++_i) {
            element = stringsToSearchFor[index];
            if (index !== stringsToSearchFor.length - 1 && element !== "") {
              console.log(element);
              regexToSearchFor = new RegExp("href=\s*[\"a-z0-9.\-\/_\?&;=:\s]*" + element + "[\"a-z0-9.\-\/_\?&;=:\s]*[0-9]+[^> ]*", ["g"]);
              useRoot = true;
              answer = html.match(regexToSearchFor);
              console.log("Regex matches");
              console.log(answer);
              if (answer !== null) {
                for (count = _j = 0, _len1 = answer.length; _j < _len1; count = ++_j) {
                  word = answer[count];
                  word = word.replace(/\s/g, "");
                  word = word.substr(6, word.length - 7);
                  answer[count] = word;
                }
                answerA = answer.slice(0);
                answerB = answer.slice(0);
                console.log('Building one set of answers');
                for (count = _k = 0, _len2 = answerA.length; _k < _len2; count = ++_k) {
                  word = answerA[count];
                  n = word.indexOf(urlToVisitParent);
                  if (n === -1) {
                    urlOutput = urlObj.protocol + '//' + urlObj.host + '/' + word;
                    urlOutput = urlOutput.replace(/\/\//g, "\/");
                    urlOutput = urlOutput.replace(/http:\//g, "http:\/\/");
                  } else {
                    console.log("parent url is already in the URL");
                    urlOutput = word;
                  }
                  answerA[count] = urlOutput;
                }
                console.log('Building the second set of answers');
                for (count = _l = 0, _len3 = answerB.length; _l < _len3; count = ++_l) {
                  word = answerB[count];
                  n = word.indexOf(urlToVisitParent);
                  if (n === -1) {
                    urlOutput = urlToVisitParent + '/' + word;
                    urlOutput = urlOutput.replace(/\/\//g, "\/");
                    urlOutput = urlOutput.replace(/http:\//g, "http:\/\/");
                  } else {
                    console.log("parent url is already in the URL");
                    urlOutput = word;
                  }
                  answerB[count] = urlOutput;
                }
                if (allAnswersA.length < 10) {
                  allAnswersA = answerA;
                }
                if (allAnswersA.length >= 10 && answerA.length >= 10) {
                  if (answerA.length < allAnswersA.length) {
                    allAnswersA = answerA;
                  }
                }
                if (allAnswersB.length < 10) {
                  allAnswersB = answerB;
                }
                if (allAnswersB.length >= 10 && answerB.length >= 10) {
                  if (answerB.length < allAnswersB.length) {
                    allAnswersB = answerB;
                  }
                }
              }
            }
          }

          /*
          				 * Choose the correct array from the search results
           */
          alreadySent = false;
          options2 = {
            url: allAnswersA[0],
            headers: {
              'User-Agent': 'PaulCowgillBot'
            }
          };
          request(options2, function(err, resp, html2) {
            console.log('Checking a test URL');
            console.log(allAnswersA[0]);
            if (!error) {
              if (resp !== void 0) {
                if (resp.statusCode === 200) {
                  console.log(resp.statusCode);
                  allAnswersA = _.uniq(allAnswersA, false);
                  allAnswers = allAnswersA.slice(0, 10);
                  console.log("Final answer is");
                  console.log(allAnswers);
                  if (alreadySent === false) {
                    alreadySent = true;
                    return res.send({
                      success: true,
                      answer: allAnswers
                    });
                  }
                }
              } else {
                return console.log('Response undefined');
              }
            }
          });
          options2 = {
            url: allAnswersB[0],
            headers: {
              'User-Agent': 'PaulCowgillBot'
            }
          };
          request(options2, function(err, resp, html2) {
            console.log('Checking a test URL');
            console.log(allAnswersB[0]);
            if (!error) {
              if (resp !== void 0) {
                if (resp.statusCode === 200) {
                  console.log(resp.statusCode);
                  allAnswersB = _.uniq(allAnswersB, false);
                  allAnswers = allAnswersB.slice(0, 10);
                  console.log("Final answer is");
                  console.log(allAnswers);
                  if (alreadySent === false) {
                    alreadySent = true;
                    return res.send({
                      success: true,
                      answer: allAnswers
                    });
                  }
                }
              } else {
                return console.log('Response undefined');
              }
            }
          });
        }
        if (!error && response.statusCode === 404) {
          console.log('Try another URL');
          urlToVisitParent = urlToVisitParent.removeSlash();
          indexSplit = urlToVisitParent.lastIndexOf("/");
          urlToVisitParent = urlToVisitParent.substr(0, indexSplit);
          console.log(urlToVisitParent);
          visitUrl(urlToVisitParent);
        }
        return response.statusCode;
      });
    };
    return visitUrl(urlToVisitParent);
  });

}).call(this);
